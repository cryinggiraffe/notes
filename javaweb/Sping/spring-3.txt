Spring JDBC

1、JdbcTemplate
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 配置 Spirng 的 JdbcTemplate -->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate">	
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	
	执行批量更新: 批量的 INSERT, UPDATE, DELETE
	最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个 Object 的数组, 那么多条不就需要多个 Object 的数组吗
	 
	String sql = "INSERT INTO employees(last_name, email, dept_id) VALUES(?,?,?)";
		
	List<Object[]> batchArgs = new ArrayList<>();
		
	jdbcTemplate.batchUpdate(sql, batchArgs);

	
	从数据库中获取一条记录, 实际得到对应的一个对象
	注意不是调用 queryForObject(String sql, Class<Employee> requiredType, Object... args) 方法!
	而需要调用 queryForObject(String sql, RowMapper<Employee> rowMapper, Object... args)
	1. 其中的 RowMapper 指定如何去映射结果集的行, 常用的实现类为 BeanPropertyRowMapper
	2. 使用 SQL 中列的别名完成列名和类的属性名的映射. 例如 last_name lastName
	3. 不支持级联属性. JdbcTemplate 到底是一个 JDBC 的小工具, 而不是 ORM 框架
	
	String sql = "SELECT id, last_name lastName, email, dept_id as \"department.id\" FROM employees WHERE id = ?";
	RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<>(Employee.class);
	Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);


	查到实体类的集合
	注意调用的不是 queryForList 方法
	
	String sql = "SELECT id, last_name lastName, email FROM employees WHERE id > ?";
	RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<>(Employee.class);
	List<Employee> employees = jdbcTemplate.query(sql, rowMapper,5);

	
	获取单个列的值, 或做统计查询
	使用 queryForObject(String sql, Class<Long> requiredType) 

	String sql = "SELECT count(id) FROM employees";
	long count = jdbcTemplate.queryForObject(sql, Long.class);
		

	封装起来：	
	@Repository
	public class EmployeeDao {
		
		@Autowired
		private JdbcTemplate jdbcTemplate;
		
		public Employee get(Integer id){
			String sql = "SELECT id, last_name lastName, email FROM employees WHERE id = ?";
			RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<>(Employee.class);
			Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, id);
			
			return employee;
		}
	}

	
 	不推荐使用 JdbcDaoSupport, 而推荐直接使用 JdbcTempate 作为 Dao 类的成员变量
 
	@Repository
	public class DepartmentDao extends JdbcDaoSupport{

		@Autowired
		public void setDataSource2(DataSource dataSource){
			setDataSource(dataSource);
		}

		public Department get(Integer id){
			String sql = "SELECT id, dept_name name FROM departments WHERE id = ?";
			RowMapper<Department> rowMapper = new BeanPropertyRowMapper<>(Department.class);
			return getJdbcTemplate().queryForObject(sql, rowMapper, id);
		}
		
	}


	可以为参数起名字. 
	1. 好处: 若有多个参数, 则不用再去对应位置, 直接对应参数名, 便于维护
	2. 缺点: 较为麻烦. 
	
	public void testNamedParameterJdbcTemplate(){
		String sql = "INSERT INTO employees(last_name, email, dept_id) VALUES(:ln,:email,:deptid)";
		
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("ln", "FF");
		paramMap.put("email", "ff@atguigu.com");
		paramMap.put("deptid", 2);
		
		namedParameterJdbcTemplate.update(sql, paramMap);
	}

	使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作
	1. SQL 语句中的参数名和类的属性一致!
	2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. 
	
	public void testNamedParameterJdbcTemplate2(){
		String sql = "INSERT INTO employees(last_name, email, dept_id) "
				+ "VALUES(:lastName,:email,:dpetId)";
		
		Employee employee = new Employee();
		employee.setLastName("XYZ");
		employee.setEmail("xyz@sina.com");
		employee.setDpetId(3);
		
		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(employee);
		namedParameterJdbcTemplate.update(sql, paramSource);
	}
	


二、事务

	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>

	事务声明：
	@Transactional
	public void purchase(String username, String isbn) {

		double price = bookShopDao.findBookPriceByIsbn(isbn);
		
		bookShopDao.updateBookStock(isbn);
		
		bookShopDao.updateUserAccount(username, price);
	}



	事务传递性：
	@Transactional
	@Override
	public void checkout(String username, List<String> isbns) {
		// TODO Auto-generated method stub
		for(String isbn: isbns){
			bookShopService.purchase(username, isbn);
		}
	}

	//添加事务注解
	//1.使用 propagation 指定事务的传播行为, 即当前的事务方法被另外一个事务方法调用时
	//如何使用事务, 默认取值为 REQUIRED, 即使用调用方法的事务
	//REQUIRES_NEW: 事务自己的事务, 调用的事务方法的事务被挂起. 
	//2.使用 isolation 指定事务的隔离级别, 最常用的取值为 READ_COMMITTED
	//3.默认情况下 Spring 的声明式事务对所有的运行时异常进行回滚. 也可以通过对应的
	//属性进行设置. 通常情况下去默认值即可. 
	//4.使用 readOnly 指定事务是否为只读. 表示这个事务只读取数据但不更新数据, 
	//这样可以帮助数据库引擎优化事务. 若真的事一个只读取数据库值的方法, 应设置 readOnly=true
	//5.使用 timeout 指定强制回滚之前事务可以占用的时间.  
//	@Transactional(propagation=Propagation.REQUIRES_NEW,
//			isolation=Isolation.READ_COMMITTED,
//			noRollbackFor={UserAccountException.class})
	@Transactional(propagation=Propagation.REQUIRES_NEW,
			isolation=Isolation.READ_COMMITTED,
			readOnly=false,
			timeout=3)
	@Override
	public void purchase(String username, String isbn) {
		
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {}
		
		//1. 获取书的单价
		int price = bookShopDao.findBookPriceByIsbn(isbn);
		
		//2. 更新数的库存
		bookShopDao.updateBookStock(isbn);
		
		//3. 更新用户余额
		bookShopDao.updateUserAccount(username, price);
	} 


	基于注解的方法 -> 不用提供set方法，可以直接使用自动装配的注解，只需要自动扫描包即可

	基于xml的方法 -> 提供set方法，在xml文件中装配：

	
	xml文件：
	<context:component-scan base-package="com.atguigu.spring"></context:component-scan>
	
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 配置 Spirng 的 JdbcTemplate -->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置 bean -->
	<bean id="bookShopDao" class="com.atguigu.spring.tx.xml.BookShopDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>
	
	<bean id="bookShopService" class="com.atguigu.spring.tx.xml.service.impl.BookShopServiceImpl">
		<property name="bookShopDao" ref="bookShopDao"></property>
	</bean>
	
	<bean id="cashier" class="com.atguigu.spring.tx.xml.service.impl.CashierImpl">
		<property name="bookShopService" ref="bookShopService"></property>
	</bean>
	
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 2. 配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 根据方法名指定事务的属性 -->
			<tx:method name="purchase" propagation="REQUIRES_NEW"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3. 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.atguigu.spring.tx.xml.service.*.*(..))" 
			id="txPointCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>	
	</aop:config>

