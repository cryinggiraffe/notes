一、springmvc--HelloWorld
	1、在 web.xml  
	<!-- 配置 DispatcherServlet -->
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 配置 DispatcherServlet 的一个初始化参数: 配置 SpringMVC 配置文件的位置和名称 -->
		<!-- 
			实际上也可以不通过 contextConfigLocation 来配置 SpringMVC 的配置文件, 而使用默认的.
			默认的配置文件为: /WEB-INF/<servlet-name>-servlet.xml
		-->
		<!--  
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param>
		-->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<!-- 应答所有请求 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	（配置dispatcherServlet-servlet.xml)
	<!-- 配置自定扫描的包 -->
	<context:component-scan base-package="com.atguigu.springmvc"></context:component-scan>

	<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	2、或者配置 springmvc.xml -> 类路径下

	<context:component-scan base-package="springmvc"></context:component-scan>
	
	<bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/view/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	3、jsp页面：
	<a href="helloworld">Hello World</a><a href="helloworld">Hello World</a>

	4、controller 类
	@Controller
	public class HelloWorld {
		
		/**
		 * 1. 使用 @RequestMapping 注解来映射请求的 URL
		 * 2. 返回值会通过视图解析器解析为实际的物理视图, 对于 InternalResourceViewResolver 视图解析器, 会做如下的解析:
		 * 通过 prefix + returnVal + 后缀 这样的方式得到实际的物理视图, 然会做转发操作
		 * 
		 * /WEB-INF/views/success.jsp
		 * 
		 * @return
		 */
		
		@RequestMapping("/helloworld")
		public String hello(){
			System.out.println("hello world");
			return "success";
		}
	}