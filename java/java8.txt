一、简介
   1、速度更快：
      (1)底层数据结构改变：
         1)如hashmap:哈希算法+链表+红黑树(大于64,单个超过8个，变链表为红黑树)
	 2)concurrentHashMap:CAS算法+链表+红黑树
      (2)内存改变：
	 1)永久区：加载类的信息，几乎不会回收，回收条件比较苛刻。
         2)取消永久区，使用metaspace，即物理内存
   
二、lambda:实现接口(作用相当于匿名内部类)
   1、策略设计模式:可以省去重复实现的冗余代码。使用策略模式，不增加冗余代码，而是同时实现接口，继而通过实现类来完成不同的需求，直接使用实现类(也可以是匿名内部类)。
   2、语法：新的操作符->将lambda抄成两部分，左侧：参数列表，右侧：执行功能（lambda体)
      (1)无参数，无返回值：() -> System.out.println("hello lambda")
      (2)一个参数，无返回值：(x) -> System.out.println(x);(小括弧可以省略)
      (3)多个参数，有返回值，多条语句：(x,y) -> {System.out.println("函数式接口");
					return Integer.compare(x, y);
					};（若只有一条语句，可以省略大括弧和return关键字）
      (4)参数列表的数据类型可以省略，JVM可以进行类型推断。
           
   3、函数式接口：接口里只有一个抽象方法，可以注释为@functioninterface
   4、在之前使用接口实现类的地方使用lambda
     
   5、四大核心函数式接口：
     (1)Consumer<T>:消费性接口，void  accept(T t) (有去无回，无返回值)
     (2)Supplier<T>:供给性接口，T get();(产生一些对象)
     (3)Function<T,R>:函数性接口， R apply(T t);
     (4)Predicate<T>:断言性接口，boolean test(T t);判断

   6、方法引用和构造器引用：若lambda体中的内容已经实现，可以使用方法引用
     (1)对象::实例方法名(有消费者的作用)(x) -> System.out.println(x)=system.out::println;
     (2)类::静态方法名
     (3)类::实例方法名（参数列表中的第一参数是实例方法的调用者，第二参数是是方法的参数）
        (x,y) -> x.equals(y) 等于  String::equals
     调用方法的参数和返回值要与函数式接口中的抽象方法的参数列表和返回值保持一致

   7、构造器引用
      ClassName::new
      构造器的参数列表与函数接口的抽象方法参数列表保持一致
      
   8、数组引用
      Type::new

三、Stream(数据渠道，用于操作数据源所生成的序列)
   Stream不会存储数据、不会改变数据，会返回一个持有结果的新Stream、操作时延迟执行的

   1、创建Stream
      (1)通过Collection的stream()和parallel()
      (2)Arrays的stream()
      (3)Stream.of()
      (4)无限流Stream.iterate

   2、中间操作
      (1)内部迭代：API完成迭代(自己写迭代器时外部迭代)
      (2)中间操作不会有任何操作，终止操作一次性执行所有内容
      (3)过滤：filter-接受lambda，从中排除某些元素
         切片：limit-是元素不会超过给定数量(短路：迭代时符合条件后，就不往下跌代了)
         ship(n):跳过n个元素，返回一个仍掉n个元素的流，不足n个，返回空流
         筛选：distinct-去除重复元素
         映射：
            1)map-接受Lambda，将原属转化成其他形式或提取信息，接收一个函数作为参数，把函数应用到每个元素，映射
            2)flatMap-接收一个函数作为参数，将流中的每个值转换为另一个流，把所有流连接成一个流
         排序：
            1)自然排序sorted()(comparable)
            2)定制排序sorted(com)(comparator)
   3、终止操作
      (1)查找和匹配
	      allMatch-是否匹配所有元素
	      anyMatch-是否只是匹配一个
	      noneMatch-是否没有匹配所有元素
	      findFirst-返回第一个元素
	      findAny-返回任意一个
	      count-返回总个数
	      max
  	    min
      (2)归约
        reduce-可以讲流中元素反复结合起来，得到一个值
      (3)收集
        Collect-将流转换为其他形式
        接收一个collector接口的实现，用于给Stream中元素汇总的方法
         1)收集指定结果，放入集合中
         2)求最大值、最小值等
         3)分组、分区
         4)统计

    4、并行和串行
      (1)fork/join
        fork:将任务分成多个小任务
        join: 将任务组合成大任务